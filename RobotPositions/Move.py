import almathimport timedef move_backward(motion_proxy, posture_proxy, tts_proxy, debug=False):    """ NAO fa 3 passi indietro """    if debug:        tts_proxy.say("move_backward")        time.sleep(1)    distance_x_m = -0.08    distance_y_m = 0.0    theta_deg = 0.0    # The command position estimation will be set to the sensor position when the robot starts moving, so we use sensors    # first and commands later.    initPosition = almath.Pose2D(motion_proxy.getRobotPosition(True))    targetDistance = almath.Pose2D(distance_x_m, distance_y_m, theta_deg * almath.PI / 180)    expectedEndPosition = initPosition * targetDistance    enableArms = 0    motion_proxy.setMoveArmsEnabled(enableArms, enableArms)    motion_proxy.moveTo(distance_x_m, distance_y_m, theta_deg)def move_forward(motion_proxy, posture_proxy, tts_proxy, debug=False):    """ NAO fa 3 passi in avanti """    if debug:        tts_proxy.say("move_forward")        time.sleep(1)    distance_x_m=0.08    distance_y_m=0.0    theta_deg=0.0    # The command position estimation will be set to the sensor position when the robot starts moving, so we use sensors    # first and commands later.    initPosition = almath.Pose2D(motion_proxy.getRobotPosition(True))    targetDistance = almath.Pose2D(distance_x_m, distance_y_m, theta_deg * almath.PI / 180)    expectedEndPosition = initPosition * targetDistance    enableArms = 0    motion_proxy.setMoveArmsEnabled(enableArms, enableArms)    motion_proxy.moveTo(distance_x_m, distance_y_m,theta_deg)