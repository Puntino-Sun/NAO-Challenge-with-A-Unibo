import almathimport timedef diagonal_left(motion_proxy, posture_proxy, tts_proxy, debug=False):    """ NAO fa un passo in diagonale a sx e ritorna nella postura in piedi """    if debug:        tts_proxy.say("diagonal_left")        time.sleep(1)    distance_x_m = 0.03    distance_y_m = 0.012    theta_deg = 0.0    # The command position estimation will be set to the sensor position when the robot starts moving, so we use sensors    # first and commands later.    initPosition = almath.Pose2D(motion_proxy.getRobotPosition(True))    targetDistance = almath.Pose2D(distance_x_m, distance_y_m, theta_deg * almath.PI / 180)    expectedEndPosition = initPosition * targetDistance    enableArms = 0    motion_proxy.setMoveArmsEnabled(enableArms, enableArms)    motion_proxy.moveTo(distance_x_m, distance_y_m, theta_deg)def diagonal_right(motion_proxy, posture_proxy, tts_proxy, debug=False):    """ NAO fa un passo in diagonale a dx e ritorna nella postura in piedi """    if debug:        tts_proxy.say("Faccio un piccolo passo in diagonale a destra")        time.sleep(1)    distance_x_m = 0.03    distance_y_m = -0.012    theta_deg = 0.0    # The command position estimation will be set to the sensor position when the robot starts moving, so we use sensors    # first and commands later.    initPosition = almath.Pose2D(motion_proxy.getRobotPosition(True))    targetDistance = almath.Pose2D(distance_x_m, distance_y_m, theta_deg * almath.PI / 180)    expectedEndPosition = initPosition * targetDistance    enableArms = 0    motion_proxy.setMoveArmsEnabled(enableArms, enableArms)    motion_proxy.moveTo(distance_x_m, distance_y_m, theta_deg)